{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["pendingState","finishState","Item","isPending","includes","this","props","status","code","dateInfo","date","Img","styled","img","statusTypeStyle","width","min-width","src","logo","alt","className","type","name","React","Component","ItemList","Table","table","orders","map","o","i","key","OrderList","state","doneOrdersList","pendingOrdersList","processOrderList","data","getOrderList","sort","a","b","Date","forEach","d","push","StatusTitle","div","StatusTitleTag","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e4e6b44f.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport styled from 'styled-components';\n\nconst pendingState = [1, 2]\nconst finishState = [3, 4]\n\nclass Item extends React.Component {\n  render() {\n    let isPending = pendingState.includes(this.props.status.code);\n    let dateInfo = isPending ? `預計出貨 ${this.props.date}` : '';\n\n    const Img = styled.img`\n      filter: ${isPending ? 'grayscale(0%)' : 'grayscale(100%)'};\n      max-width: 100%;\n      padding: 15px;\n    `\n    const statusTypeStyle = isPending ? 'col-5 text-left pendingText' : 'col-5 text-left';\n    return (\n      <tr>\n        <td width=\"140px\" min-width=\"140px\"><Img src={this.props.logo} alt=\"Italian Trulli\" /></td>\n        <td >\n          <div className=\"row\">\n            <div className={statusTypeStyle}>{this.props.status.type}</div>\n            <div className=\"col-7 text-right\">{dateInfo}</div>\n          </div>\n          <div>{this.props.name}</div>\n        </td>\n      </tr>\n    );\n  }\n}\nclass ItemList extends React.Component {\n  render() {\n    const Table = styled.table`\n      font-size: 18px;\n      width: 100%;\n    `\n    return (\n      <div>\n        <Table>\n          <tbody>\n            {this.props.orders.map((o, i) => {\n              let { status, name, date, logo } = o\n              return (<Item key={i} status={status} name={name} date={date} logo={logo} />)\n            })}\n          </tbody>\n        </Table>\n      </div>\n    );\n  }\n}\n\nclass OrderList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      doneOrdersList: [],\n      pendingOrdersList: []\n    }\n    this.processOrderList();\n  }\n\n  getOrderList() {\n    let data = {\n      orders: [\n        {\n          name: 'Livi優活 抽取式衛生紙(100抽x10包x10串/箱)',\n          logo: 'https://static.oopocket.com/store/iconTreemall@3x.png',\n          status: {\n            code: 3,\n            type: '已取消'\n          },\n          date: '107/6/12'\n        },\n        {\n          name: 'BALMUDA The Toaster 百慕達烤麵包機-黑色',\n          logo: 'https://static.oopocket.com/store/iconTreemall@3x.png',\n          status: {\n            code: 2,\n            type: '已成立'\n          },\n          date: '108/7/21'\n        },\n        {\n          name: '贈-短慧萬用鍋HD2133+三合一濾網「LG樂金」韓國原裝...',\n          logo: 'https://static.oopocket.com/store/iconTreemall@3x.png',\n          status: {\n            code: 1,\n            type: '處理中'\n          },\n          date: '108/6/2'\n        },\n        {\n          name: 'Apple AirPds 2',\n          logo: 'https://static.oopocket.com/store/iconTreemall@3x.png',\n          status: {\n            code: 4,\n            type: '已送達'\n          },\n          date: '108/3/02'\n        }\n      ]\n    }\n\n    return data.orders;\n  }\n\n  processOrderList() {\n    let data = this.getOrderList()\n\n    data.sort((a, b) => {\n      return (new Date(b.date)) - (new Date(a.date))\n    });\n\n    let doneOrdersList = []\n    let pendingOrdersList = []\n\n    data.forEach(d => {\n      if (pendingState.includes(d.status.code)) {\n        pendingOrdersList.push(d)\n      }\n\n      if (finishState.includes(d.status.code)) {\n        doneOrdersList.push(d)\n      }\n    });\n\n    this.state.doneOrdersList = doneOrdersList\n    this.state.pendingOrdersList = pendingOrdersList\n  }\n\n  render() {\n    const StatusTitle = styled.div`\n      background: #F5F5F5;\n      padding: 10px;\n      border: 1px solid #E5E5E5;\n    `\n\n    const StatusTitleTag = styled.div`\n      border-left: 8px solid green;\n      padding-left: 5px;\n    `\n    return (\n      <div>\n        <div>\n          <StatusTitle>\n            <StatusTitleTag>\n              進行中\n            </StatusTitleTag>\n          </StatusTitle>\n          <ItemList orders={this.state.pendingOrdersList} />\n        </div>\n        <div>\n          <StatusTitle>\n            <StatusTitleTag>\n              已完成\n            </StatusTitleTag>\n          </StatusTitle>\n          <ItemList orders={this.state.doneOrdersList} />\n        </div>\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <OrderList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}